% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TreeSeg.R
\name{TreeSeg}
\alias{TreeSeg}
\title{Compute TreeCrown Segments}
\usage{
TreeSeg(
  chm = NULL,
  a,
  b,
  h,
  MIN = 0,
  MAX = 1000,
  CHMfilter = 1,
  silent = FALSE
)
}
\arguments{
\item{chm}{raster -  Canopy Height Model RasterLayer.}

\item{a}{numeric - single value for MovingWindow.}

\item{b}{numeric - single value for MovingWindow.}

\item{h}{numeric - maximum height of trees (in meter) to detect trees.}

\item{MIN}{numeric - the minimum area for crowns. Smaller polygons are cropped.}

\item{MAX}{numeric - the maximum area for crowns. Larger polygons are cropped.}

\item{CHMfilter}{numeric - uses a sum filter on the chm with a MovingWindow of (x*x), which must be odd. Default=1 no filter.}

\item{silent}{bolean - if TRUE the function will not print any progress messages (default=FALSE).}
}
\value{
returns a PolygonLayer with segments
}
\description{
computes polygon segments for TreeCrowns based on watershed algorithm
}
\details{
uses a MovingWindow of x*a+b to detect local maxima in a chm to compute TreeCrown Segments
\itemize{
\item parameter selection - use \code{\link{BestSegVal}} to automated detect best fitting parameters for a, b, h, MIN and filter.
}
}
\note{
A 'brute force' segmentation with random parameters is not recommended. TreeSeg is mainly used to compute segments AFTER the validation of best fitting parameters with \code{\link{BestSegVal}}.
Further to estimate the quality of the computed polygons it is recommended to use \code{\link{TreeSegCV}} for a x-fold CrossValdiation over x different subareas. For full workflow see the 'CENITH_Tutorial'.
}
\examples{
# load packages
require(CENITH)
require(raster)
require(mapview)
# load data
chm <- raster::raster(system.file("extdata","lau_chm.tif",package = "CENITH"))
# take a look on the data
plot(chm)
# NOTE: the example should NOT show to get optimal results (for this see 'BestSegVal')
# start segmentation
x <- TreeSeg(chm,a=0.3,b=0.5,h=1)
length(x)# amount of trees
# compare result with chm
mapview(chm)+x
# clip min and or max polygons
y <-TreeSeg(chm,a=0.2,b=0.5,h=2,MIN=10,MAX=100)
length(y)# amount of trees
mapview(chm)+y
}
\seealso{
\code{\link{BestSegVal}},\code{\link{TreeSegCV}}
}
\author{
Andreas SchÃ¶nberg
}
